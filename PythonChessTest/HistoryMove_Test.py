import ChessPython
import unittest 

new_board = ChessPython.Board()
history = ChessPython.HistoryMoves()

new_board.addChessPiece(ChessPython.BlackRook(), "a8")
new_board.addChessPiece(ChessPython.BlackRook(), "h8")
new_board.addChessPiece(ChessPython.WhiteRook(), "a1")
new_board.addChessPiece(ChessPython.WhiteRook(), "h1")
new_board.addChessPiece(ChessPython.BlackKnight(), "b8")
new_board.addChessPiece(ChessPython.BlackKnight(), "g8")
new_board.addChessPiece(ChessPython.WhiteKnight(), "b1")
new_board.addChessPiece(ChessPython.WhiteKnight(), "g1")
new_board.addChessPiece(ChessPython.BlackBishop(), "c8")
new_board.addChessPiece(ChessPython.BlackBishop(), "f8")
new_board.addChessPiece(ChessPython.WhiteBishop(), "c1")
new_board.addChessPiece(ChessPython.WhiteBishop(), "f1")
new_board.addChessPiece(ChessPython.BlackQueen(), "d8")
new_board.addChessPiece(ChessPython.WhiteQueen(), "d1")
new_board.addChessPiece(ChessPython.BlackKing(), "e8")
new_board.addChessPiece(ChessPython.WhiteKing(), "e1")

new_board.addChessPiece(ChessPython.BlackPawn(), "a7")
new_board.addChessPiece(ChessPython.BlackPawn(), "b7")
new_board.addChessPiece(ChessPython.BlackPawn(), "c7")
new_board.addChessPiece(ChessPython.BlackPawn(), "d7")
new_board.addChessPiece(ChessPython.BlackPawn(), "e7")
new_board.addChessPiece(ChessPython.BlackPawn(), "f7")
new_board.addChessPiece(ChessPython.BlackPawn(), "g7")
new_board.addChessPiece(ChessPython.BlackPawn(), "h7")

new_board.addChessPiece(ChessPython.WhitePawn(), "a2")
new_board.addChessPiece(ChessPython.WhitePawn(), "b2")
new_board.addChessPiece(ChessPython.WhitePawn(), "c2")
new_board.addChessPiece(ChessPython.WhitePawn(), "d2")
new_board.addChessPiece(ChessPython.WhitePawn(), "e2")
new_board.addChessPiece(ChessPython.WhitePawn(), "f2")
new_board.addChessPiece(ChessPython.WhitePawn(), "g2")
new_board.addChessPiece(ChessPython.WhitePawn(), "h2")

new_game = ChessPython.Game(new_board)

new_game.MoveChessPiece("d4")
new_game.MoveChessPiece("d5")
new_game.MoveChessPiece("e4")
new_game.MoveChessPiece("e5")
new_game.MoveChessPiece("Nf3")
new_game.MoveChessPiece("Nf6")
new_game.MoveChessPiece("Nc3")
new_game.MoveChessPiece("Nc6")
new_game.MoveChessPiece("Bf4")
new_game.MoveChessPiece("Bf5")
new_game.MoveChessPiece("Bc4")
new_game.MoveChessPiece("Bc5")
new_game.MoveChessPiece("Nxe5")
new_game.MoveChessPiece("Nxe4")
new_game.MoveChessPiece("Nxe4")
new_game.MoveChessPiece("Nxe5")

class Test_HistoryMoves(unittest.TestCase):
    def test_HistoryMoves_ShowAllHistory(self):
        self.assertEqual(str(new_game.historyMoves), "['d4', 'd5', 'e4', 'e5', 'Nf3', 'Nf6', 'Nc3', 'Nc6', 'Bf4', 'Bf5', 'Bc4', 'Bc5', 'Nxe5', 'Nxe4', 'Nxe4', 'Nxe5']")
        self.assertEqual(len(new_game.historyMoves.moves), 16)
        self.assertEqual(new_game.historyMoves.moves[-4][1], 'e7')
        self.assertIsInstance(new_game.historyMoves.moves[-4][2], ChessPython.BlackPawn)

        self.assertEqual(new_game.historyMoves.moves[2][1], 'f6')
        self.assertIsInstance(new_game.historyMoves.moves[2][2], ChessPython.BlackKnight)
    
# new_game.board.printBoard()
